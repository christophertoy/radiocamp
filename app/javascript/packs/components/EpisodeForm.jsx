import React, { useState } from 'react';
import {
  Grid,
  TextField,
  makeStyles,
  Select,
  FormControl,
  InputLabel,
  MenuItem,
  Button,
  Dialog,
  DialogActions,
  DialogContent,
  DialogContentText,
  DialogTitle
} from "@material-ui/core";

// junk data - remove once API calls are in place

const jsonShows = [
  {
    id: 1,
    name: "Modern Expansion",
    description: null,
    image: null,
    genre: null,
    broadcaster_id: 1,
    created_at: "2020-10-25T20:36:31.152Z",
    updated_at: "2020-10-25T20:36:31.152Z",
    url: "http://localhost:3000/shows/1.json"
  },
  {
    id: 2,
    name: "Contemporary Few",
    description: null,
    image: null,
    genre: null,
    broadcaster_id: 1,
    created_at: "2020-10-25T20:36:31.168Z",
    updated_at: "2020-10-25T20:36:31.168Z",
    url: "http://localhost:3000/shows/2.json"
  },
  {
    id: 3,
    name: "Syntactic Yacht",
    description: null,
    image: null,
    genre: null,
    broadcaster_id: 2,
    created_at: "2020-10-25T20:36:31.177Z",
    updated_at: "2020-10-25T20:36:31.177Z",
    url: "http://localhost:3000/shows/3.json"
  },
  {
    id: 4,
    name: "Robots in Plain Sight",
    description: null,
    image: null,
    genre: null,
    broadcaster_id: 1,
    created_at: "2020-10-25T20:36:31.152Z",
    updated_at: "2020-10-25T20:36:31.152Z",
    url: "http://localhost:3000/shows/1.json"
  }
];

const useStyle = makeStyles(theme => ({
  root: {
    // this is a selector based on class name generated by Mui
    '& .MuiFormControl-root': {
      width: '80%',
      margin: theme.spacing(1)
    }
  }
}));

// dummy placeholder function returns a simplified show object
// there will need to be a call to API here
const getShows = () => {
  return jsonShows.map(show => {
    return { id: show.id, name: show.name }
  });
};

const initialValues = {
  id: null,
  showName: "",
  title: "",
  description: "",
  episode_url: "",
  release_date: "2020-10-31"
};

export default function EpisodeForm() {

  const [shows, setShows] = useState(initialValues);
  const [open, setOpen] = useState(false);
  const classes = useStyle();

  const handleClickOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
  };

  const handleInputChange = (event) => {
    const { name, value } = event.target;
    setShows({
      ...shows,
      [name]: value
    })
  }

  return (
    <div>
      <Button variant="outlined" color="primary" onClick={handleClickOpen}>
        Add an episode
      </Button>
      <Dialog open={open} onClose={handleClose} aria-labelledby="form-dialog-title">
        <DialogTitle id="form-dialog-title">Add Episode</DialogTitle>
        <DialogContent>

          <form className={classes.root}>
            <Grid container>

              <Grid item s={3}>
                <FormControl className={classes.formControl}>
                  <InputLabel id="demo-simple-select-label">Show</InputLabel>
                  <Select
                    variant="outlined"
                    name="showName"
                    label="Show"
                    id="demo-simple-select"
                    value={shows.showName}
                    onChange={handleInputChange}
                  >
                    <MenuItem value="Choose a Show"></MenuItem>
                    {
                      getShows().map(show =>
                        <MenuItem
                          key={show.id}
                          value={show.name}>
                          {show.name}
                        </MenuItem>)
                    }
                  </Select>
                </FormControl>

                <TextField
                  variant="outlined"
                  label="Title"
                  name="title"
                  value={shows.title}
                  onChange={handleInputChange}
                />
                <TextField
                  variant="outlined"
                  label="Description"
                  multiline
                  rows={4}
                  name="description"
                  value={shows.description}
                  onChange={handleInputChange}
                />
                <TextField
                  variant="outlined"
                  label="Episode URL"
                  name="episode_url"
                  value={shows.episode_url}
                  onChange={handleInputChange}
                />
                <TextField
                  variant="outlined"
                  label="Release Date"
                  name="release_date"
                  type="date"
                  value={shows.release_date}
                  onChange={handleInputChange}
                />

              </Grid>
              <Grid item xs={6}></Grid>
            </Grid>

          </form>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleClose} color="primary">
            Cancel
          </Button>
          <Button onClick={handleClose} color="primary">
            Save
          </Button>
        </DialogActions>
      </Dialog>
    </div>
  )
};